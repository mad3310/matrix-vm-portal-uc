<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.1.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task-3.1.xsd">

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>

    <!-- Root Context: defines shared resources visible to all other web components -->
    <!-- bean annotation driven -->
    <context:annotation-config/>
    <context:component-scan base-package="com.letvcloud.saas"/>
    <context:component-scan base-package="com.letvcloud.uc.ms.service">
        <!--<context:exclude-filter type="regex" expression="com.letvcloud.saas.util.session.*"></context:exclude-filter>-->
    </context:component-scan>
    <context:component-scan base-package="com.letv.live.framework"></context:component-scan>

    <!-- 未知异常处理类 -->
    <bean class="com.letvcloud.saas.exception.UnknownExceptionAlerter"/>

    <!-- Enables the Spring Task @Scheduled programming model -->
    <task:executor id="executor" pool-size="5"/>
    <task:scheduler id="scheduler" pool-size="5"/>
    <task:annotation-driven executor="executor" scheduler="scheduler"/>

    <!-- 数据源配置, 使用应用中的DBCP数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${letv_ms.jdbc.driver}"/>
        <property name="url" value="${letv_ms.jdbc.url}"/>
        <property name="username" value="${letv_ms.jdbc.username}"/>
        <property name="password" value="${letv_ms.jdbc.password}"/>

        <!-- Connection Pooling Info -->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <property name="maxActive" value="${letv_ms.jdbc.maxActive}"/>
        <property name="maxIdle" value="10"/>
        <property name="defaultAutoCommit" value="true"/>
        <property name="validationQuery" value="select 1"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="minEvictableIdleTimeMillis" value="5000"/>
        <property name="timeBetweenEvictionRunsMillis" value="4500"/>
    </bean>

    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>

    <!-- iBatis -->
    <bean id="letvMsSqlmapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation">
            <value>classpath:sqlMapConfig_uc.xml</value>
        </property>
    </bean>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 指定所上传文件的总大小不能超过20MB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
        <property name="maxUploadSize" value="200000000"/>
    </bean>

    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/views/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
            </props>
        </property>
    </bean>

    <!-- redis -->
    <bean id="jedisPoolConfig1" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
    </bean>
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="poolConfig" ref="jedisPoolConfig1"/>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>

    <!-- CBase缓存 -->
    <bean name="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
        <constructor-arg>
            <list>
                <bean class="java.net.InetSocketAddress">
                    <constructor-arg>
                        <value>${memcache.nodelist}</value>
                    </constructor-arg>
                    <constructor-arg>
                        <value>${memcache.port}</value>
                    </constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <property name="connectionPoolSize" value="${memcache.connectionPoolSize}"></property>
    </bean>
    <bean id="memcachedClient" factory-bean="memcachedClientBuilder" factory-method="build" destroy-method="shutdown"/>
    <bean name="cacheClient" class="com.letvcloud.saas.util.cache.CbaseCacheClient"/>

    <!-- 导入相关配置 -->
    <import resource="classpath:dubbo/applicationContext-dubbo.xml"/>
    <import resource="classpath:dubbo/service-consumer.xml"/>

    <!-- 定义易受环境影响的变量 -->
    <beans profile="local">
        <bean id="configProperties"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>WEB-INF/conf/local/application.properties</value>
                </list>
            </property>
        </bean>
    </beans>
    <beans profile="dev">
        <bean id="configProperties"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>WEB-INF/conf/dev/application.properties</value>
                </list>
            </property>
        </bean>
    </beans>
    <beans profile="pre">
        <bean id="configProperties"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>WEB-INF/conf/pre/application.properties</value>
                </list>
            </property>
        </bean>
    </beans>
    <beans profile="prod">
        <bean id="configProperties"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>WEB-INF/conf/prod/application.properties</value>
                </list>
            </property>
        </bean>
    </beans>
</beans>
